-- Represents a collection of items that were sold by a store
class Sale is subclass of Transaction
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	giftCardsUsed: set of GiftCard;
	giftCardsSold: set of GiftCard;
	
operations

	/*  Sell products, possibly using active gift cards.
	Pre:
	- 
	- Client owns gift cards used.
	Post:
	- 
	*/
	public Sale: Date * Client * set of Product * set of GiftCard * StoreCashier ==> Sale
	Sale(d, c, p, cardsUsed, sc) ==
		(
		date:=d;
		client:=c;
		productsTransacted:=p;
		giftCardsUsed:=cardsUsed;
		storeAuthorizer:= sc;
		value:=sumProductValues(p);
		return self
		)
		pre card p >= 1
		post 
			date = d and 
			client = c and 
			productsTransacted = p and 
			giftCardsUsed = cardsUsed and 
			storeAuthorizer = sc and 
			value = sumProductValues(productsTransacted);
		
	/* Client buys gift cards.
	Pre:
	- 
	Post:
	- 
	*/
	public Sale: Date * Client * set of GiftCard * StoreCashier ==> Sale
	Sale(d, c, g, sc) ==
		is not yet specified
		pre card g >= 1
		post value = sumGCValues(g) and date = d and client = c and giftCardsSold = g and storeAuthorizer = sc;

	public pure sumProductValues: set of Product ==> nat
	sumProductValues(pSet) ==
		(
		dcl result: nat := 0;
		for all p in set pSet do 
			(
			result := result + p.getSellPrice();
			);
		return result;
		)
		pre true
		post true; -- same as body
	
	public pure sumGCValues: set of GiftCard ==> nat
	sumGCValues(gcSet) ==
		(
		dcl result: nat := 0;
		for all g in set gcSet do 
			(
			result := result + g.getValue();
			);
		return result;
		)
		pre true
		post true; -- same as body
		
functions
	
traces
-- TODO Define Combinatorial Test Traces here
end Sale