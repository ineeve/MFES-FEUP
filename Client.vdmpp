class Client
types
	public NotEmptyString = seq1 of char;
values
-- TODO Define values here
instance variables
	creditNotes: nat;
	name: NotEmptyString;
	ownedGiftCards: set of GiftCard;
	transactions: set of Transaction;
	
operations
	public Client(nameSeq: NotEmptyString) c: Client ==
			is not yet specified
			 pre len nameSeq > 0
			 post creditNotes = 0 and len name > 0
			 		and ownedGiftCards = {} and transactions = {};
			 
	public addCreditNote(x: nat) ==
			is not yet specified
			pre creditNotes > 0 and x > 0
			post creditNotes = creditNotes~ + x;
	
	/*
	Post:
	- Gifted client has one more gift card than previously.
	- Gifted client has one more gift card with the given value than prevously.
	*/
	public addGiftCard(value: nat1) ==
		is not yet specified
		pre true
		post
			card ownedGiftCards = card ownedGiftCards~ + 1
			and len [x | x in seq valuesFromGiftCards(ownedGiftCards) & x = value]
				= len [x | x in seq valuesFromGiftCards(ownedGiftCards~) & x = value] + 1;
			
	public buyGiftCard(value: nat1, giftedClient: Client) ==
		giftedClient.addGiftCard(value)
		pre true
		post true;
		
	/*
	Post:
	- Has one more product of the bought kind in purchase transactions than previously.
	*/
	public buyProduct(product: Product, giftCards: set of GiftCard) ==
		is not yet specified
		pre true
		post
			len [x | x in seq transactions.productsTransacted & isofclass(Purchase, x) and x = product]
				= len [x | x in seq transactions~.productsTransacted & isofclass(Purchase, x) and x = product] + 1;
		
	/*
	Pre:
	Post:
	- Has one more product of the sold kind in sales transactions than previously.
	*/
	public sellProduct(product: Product) ==
		is not yet specified
		pre true
		post
			len [x | x in seq transactions.productsTransacted & isofclass(Sale, x) and x = product]
				= len [x | x in seq transactions~.productsTransacted & isofclass(Sale, x) and x = product] - 1;
			
	/*
	Pre:
	- Given gift card isn't nil.
	*/
	public ownsGiftCard(giftCard: GiftCard) b: bool ==
		b := giftCard in set ownedGiftCards
		pre giftCard <> nil
		post true;
	
	/*
	Pre:
	- There's at least 1 gift card in the given set.
	*/
	public ownsGiftCards(giftCards: set of GiftCard) b: bool ==
		for all x in set giftCards do b := b and ownsGiftCard(x)
		pre card giftCards >= 1
		post forall x in set giftCards & b = b and ownsGiftCard(x);
	
functions

	valuesFromGiftCards(g: set of GiftCard) res: seq of nat1 ==
		for all giftCard in set g do res := res ^ giftCard.value
		post forall giftCard in set g & res = res ^ giftCard.value;

traces
-- TODO Define Combinatorial Test Traces here
end Client