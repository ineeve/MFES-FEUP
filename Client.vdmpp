-- A client of the store.
-- A client may as well be a supplier of products.
class Client
types
	public NotEmptyString = seq1 of char;
values
instance variables
	static idCounter: nat := 0;
	id: nat1;
	name: NotEmptyString;
	boughtProducts: set of Product := {};
	soldProducts: set of Product := {};
	boughtGiftCards: set of GiftCard := {};
operations
	public Client: NotEmptyString ==> Client
	Client(nameSeq) ==
			(name:=nameSeq;idCounter := idCounter + 1;id := idCounter; return self)
			 pre len nameSeq > 0
			 post len name > 0 and 
			 id = idCounter~ + 1 and
			 boughtProducts = {} and
			 soldProducts = {} and 
			 boughtGiftCards = {} and
			 RESULT = self;
	
	-- Update name of the client
	public setName: NotEmptyString ==> ()
		setName(newName) ==
			name := newName
			pre true
			post name = newName;
			
	-- Get name of the client		
	public getName: () ==> NotEmptyString
		getName() ==
			return name
			pre true
			post RESULT = name;
			
	-- Get id of the client
	public pure getId: () ==> nat1
		getId() == 
			return id
			pre true
			post RESULT = id;

	-- Register that the client bought a product.
	public buyProduct: Product ==> ()
		buyProduct(product) ==
			(
			boughtProducts := boughtProducts union {product};
			)
			pre true
			post
				card boughtProducts = card boughtProducts~ + 1 -- Has one more product bought than previously.
				and product in set boughtProducts;
		
	-- Register that the client sold a product
	public sellProduct: Product ==> ()
	sellProduct(product) ==
		soldProducts := soldProducts union {product}
			pre true
			post
				card soldProducts = card soldProducts~ + 1  -- Has one more product sold than previously.
				and product in set soldProducts;
				
	-- Register that the client bought a gift card
	public buyGiftCard: GiftCard ==> ()
		buyGiftCard(giftCard) ==
			boughtGiftCards := boughtGiftCards union {giftCard}
			pre true
			post card boughtGiftCards = card boughtGiftCards~ + 1 and
			giftCard in set boughtGiftCards;
	
	-- Get the set of products sold by the client	
	public pure getProductsSold: () ==> set of Product
		getProductsSold() ==
			return soldProducts
			pre true
			post RESULT = soldProducts;
	
	-- Get the set of products bought by the client
	public pure getProductsBought: () ==> set of Product
		getProductsBought() ==
			return boughtProducts
			pre true
			post RESULT = boughtProducts;
	
	-- Get the set of gift cards bought by the client		
	public pure getGiftCardsBought: () ==> set of GiftCard
		getGiftCardsBought() ==
			return boughtGiftCards
			pre true
			post RESULT = boughtGiftCards;
		
functions
	
		

traces
-- TODO Define Combinatorial Test Traces here
end Client