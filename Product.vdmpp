class Product
types
	public CustomString = seq1 of char;
	public ProductState = <New> | <Low_Use> | <High_Use>;
values
	public CREDIT_NOTE_MULTIPLIER: real = 1.2;
instance variables
	protected static idCounter: nat := 0;
	protected id: nat;
	protected buyPrice: real;
	protected sellPrice: real;
	protected state: ProductState;
	protected description: [CustomString];
	inv buyPrice <> undefined;
	inv sellPrice <> undefined;
	inv id <> undefined;
	inv state <> undefined;
operations
	
	public pure getSellPrice: () ==> real
	getSellPrice() ==
		return sellPrice
		pre true
		post RESULT = sellPrice;
		
	public pure getBuyPrice: () ==> real
	getBuyPrice() ==
		return buyPrice
		pre true
		post RESULT = buyPrice;
		
	public pure getCreditNotesValue: () ==> real
	getCreditNotesValue() ==
		return buyPrice * CREDIT_NOTE_MULTIPLIER
		pre true
		post RESULT = buyPrice * CREDIT_NOTE_MULTIPLIER;
		
	public setDescription: CustomString ==> ()
	setDescription(newDescription) == 
		description := newDescription
		pre true
		post description = newDescription;
	
	protected setBuyPrice: () ==> ()
	setBuyPrice() ==
		buyPrice :=  10 * getStateValue()
	pre state <> undefined
	post buyPrice <> undefined;
	
	/* Set sell price automatically to be 1.3 * buy price.
	*/
	protected setSellPrice: () ==> ()
	setSellPrice() ==
		sellPrice := 1.3 * buyPrice
	pre buyPrice <> undefined
	post sellPrice > buyPrice;
	
	/* Set sell price manually.
	*/
	public setSellPrice: real ==> ()
	setSellPrice(newPrice) ==
		sellPrice := newPrice
	pre buyPrice <> undefined and newPrice > buyPrice
	post sellPrice > buyPrice and sellPrice = newPrice;

	public pure getStateValue: () ==> real
	getStateValue() ==
	(
	if state = <New> then return 1.0;
	if state = <Low_Use> then return 0.8;
	return 0.5;
	)
	pre state = <New> or state = <Low_Use> or state = <High_Use>
	post RESULT = 0.5 or RESULT = 0.8 or RESULT = 1.0;
	
	public pure getDescription: () ==> CustomString
	getDescription() ==
		return description
		pre true
		post RESULT = description;
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Product