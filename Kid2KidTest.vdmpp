class Kid2KidTest
instance variables
	kid2kid : Kid2Kid := new Kid2Kid();
	client: Client := new Client("abc");
	store: Store := new Store("Porto");
	cashier: StoreCashier;
	today: Date := new Date(4,1,2019);
operations
	
	private assertTrue: bool ==> ()
	 assertTrue(cond) == return
	 pre cond;
	 
	private testAddClient: () ==> ()
		testAddClient() ==
		(
			assertTrue(card kid2kid.getClients() = 0);
			kid2kid.addClient(client);
			assertTrue(card kid2kid.getClients() = 1);
		);
			
	private testAddStore: () ==> ()
		testAddStore() ==
		(
			assertTrue(card kid2kid.getStores() = 0);
			kid2kid.addStore(store);
			assertTrue(card kid2kid.getStores() = 1);
		);
		
	private testAddCashierToStore: () ==> ()
		testAddCashierToStore() ==
		(
			cashier := new StoreCashier("Joao", store);
			store.addCashier(cashier);
			assertTrue(card store.getCashiers() = 1);
		);
		
	private testStoreBuyProductInCash : () ==> ()
		testStoreBuyProductInCash() ==
		(
			dcl p: Product := new Toy(5, <CARS>);
			assertTrue(p not in set store.getProductsAvailable());
			assertTrue(p not in set client.getProductsSold());
			kid2kid.buyProductInCash(p,client,cashier,today);
			assertTrue(p in set store.getProductsAvailable());
			assertTrue(p in set client.getProductsSold());
		);
		
	private testStoreBuyProductInCreditNotes: () ==> ()
		testStoreBuyProductInCreditNotes() ==
		(
			dcl p: Product := new Toy(2, <PUZZLES>);
			assertTrue(p not in set store.getProductsAvailable());
			assertTrue(p not in set client.getProductsSold());
			kid2kid.buyProductInCreditNotes(p, client, cashier, today);
			assertTrue(p in set store.getProductsAvailable());
			assertTrue(p in set client.getProductsSold());
			assertTrue(store.getCreditNotesOfClient(client.getId()) > 0);
		);
	
	
	public static main: () ==> ()
		main() ==
		(
			dcl kid2KidTest: Kid2KidTest := new Kid2KidTest();
			kid2KidTest.testAddClient();
			kid2KidTest.testAddStore();
			kid2KidTest.testAddCashierToStore();
			kid2KidTest.testStoreBuyProductInCash();
		);

traces
-- TODO Define Combinatorial Test Traces here
end Kid2KidTest