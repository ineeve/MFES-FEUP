-- Test the Kid2Kid system
class Kid2KidTest
types
	public NotEmptyString = seq1 of char;
instance variables
	kid2kid : Kid2Kid := new Kid2Kid();
	client: Client := new Client("abc");
	store: Store := new Store("Porto");
	cashier: StoreCashier;
	today: Date := new Date(4,1,2019);
	products: seq of Product := [];
operations
	
	private assertTrue: bool ==> ()
	 assertTrue(cond) == return
	 pre cond;
	
	-- Login as admin
	private loginAdmin: () ==> ()
	loginAdmin() ==
	(
		assertTrue(kid2kid.login("Bad admin name") = <LoggedOut>);
		assertTrue(kid2kid.login("Admin") = <Admin>);
	);
	
	-- Login as cashier
	private loginCashier: NotEmptyString * NotEmptyString ==> ()
	loginCashier(storeName, cashierName) ==
	(
		assertTrue(kid2kid.login("Bad store name", "Bad cashier name") = <LoggedOut>);
		assertTrue(kid2kid.login(storeName, cashierName) = <Cashier>);
		assertTrue(kid2kid.getLoggedInCashier().getName() = cashierName);
	);
	 
	-- Add a client to the system
	private testAddClient: () ==> ()
		testAddClient() ==
		(
			assertTrue(card kid2kid.getClients() = 0);
			kid2kid.addClient(client);
			assertTrue(card kid2kid.getClients() = 1);
			kid2kid.addClient(new Client("abcd"));
			assertTrue(card kid2kid.getClients() = 2);
			assertTrue(not exists i, j in set kid2kid.getClients() & i <> j and i.getId() = j.getId());
		);
	
	-- Add a store to the system
	private testAddStore: () ==> ()
		testAddStore() ==
		(
			assertTrue(card kid2kid.getStores() = 0);
			kid2kid.addStore(store);
			assertTrue(card kid2kid.getStores() = 1);
		);
		
	-- Add a cashier to an existing store
	private testAddCashierToStore: (NotEmptyString) ==> ()
		testAddCashierToStore(name) ==
		(
			dcl prevNumCashiers: nat := card store.getCashiers();
			cashier := new StoreCashier(name, store);
			store.addCashier(cashier);
			assertTrue(card store.getCashiers() = prevNumCashiers + 1);
		);
		
	-- Buy products as Admin and pay in cash. Test that transactions of cashier have increased
	private testStoreBuyProductsInCashAsAdmin: () ==> ()
	testStoreBuyProductsInCashAsAdmin() ==
		(
			dcl toy: Product := new Toy(<New>, nil, 5, nil, <Cars>);
			dcl numTransactions: nat := card kid2kid.getTransactionsOfCashier(cashier);
			kid2kid.buyProductInCash(toy,client,cashier,today);
			assertTrue(card kid2kid.getTransactionsOfCashier(cashier) = numTransactions + 1);
		);
	
	-- Buy products as cashier. Test that transactions of cashier have increased
	private testStoreBuyProductsInCashAsCashier: () ==> ()
	testStoreBuyProductsInCashAsCashier() ==
		(
			dcl toy: Product := new Toy(<New>, nil, 5, nil, <Cars>);
			dcl numTransactions: nat := card kid2kid.getTransactionsOfLoggedInCashier();
			kid2kid.buyProductInCash(toy, client, kid2kid.getLoggedInCashier(), today);
			assertTrue(card kid2kid.getTransactionsOfLoggedInCashier() = numTransactions + 1);
		);
	
	-- Products sold are saved in the store and in the client
	private testStoreBuyProductsInCash: () ==> (nat)
		testStoreBuyProductsInCash() ==
		(
			dcl toy: Product := new Toy(<New>, nil, 5, nil, <Cars>);
			dcl gear: Product := new Gear(<High_Use>, nil, 1, 20, <Bathtubs>);
			dcl furniture: Product := new Furniture(<New>, nil, <Beds>);
			products := [toy, gear, furniture];
			assertTrue(elems products inter store.getProductsAvailable() = {});
			assertTrue(elems products  inter client.getProductsSold() = {});
			kid2kid.buyProductInCash(toy,client,cashier,today);
			kid2kid.buyProductInCash(gear,client,cashier,today);
			kid2kid.buyProductInCash(furniture,client,cashier,today);
			assertTrue(elems products subset store.getProductsAvailable());
			assertTrue(elems products subset client.getProductsSold());
			return len products;
		);
		
	-- Credit notes are added to a client
	private testStoreBuyProductsInCreditNotes: () ==> (nat)
		testStoreBuyProductsInCreditNotes() ==
		(
			dcl boots: Product := new Footwear(<Low_Use>, "Boots", 20, <Boots>);
			dcl jeans: Product := new Clothing(<Low_Use>, "Blue Jeans", 1, 2, <Jeans>);
			dcl productsSet: set of Product := {boots, jeans};
			dcl clientPrevCredit: real := store.getCreditNotesOfClient(client.getId());
			assertTrue(productsSet inter store.getProductsAvailable() = {});
			assertTrue(productsSet inter client.getProductsSold() = {});
			kid2kid.buyProductInCreditNotes(boots, client, cashier, today);
			kid2kid.buyProductInCreditNotes(jeans, client, cashier, today);
			assertTrue(productsSet subset store.getProductsAvailable());
			assertTrue(productsSet subset client.getProductsSold());
			assertTrue(store.getCreditNotesOfClient(client.getId()) = clientPrevCredit + boots.getCreditNotesValue() + jeans.getCreditNotesValue());
			return card productsSet;
		);

	-- Get cashiers returns expected number of cashiers
	private testGetCashiers: nat ==> ()
		testGetCashiers(expectedNumber) ==
		(
			assertTrue(card kid2kid.getCashiers() = expectedNumber);
		);
		
	-- Cashier names are as expected
	private testGetCashierNames: set of NotEmptyString ==> ()
		testGetCashierNames(namesSet) ==
		(
			assertTrue( (namesSet \ kid2kid.getCashierNames()) = {});
		);
		
	-- Remove a cashier and re-add him.	
	private testRemoveCashier: () ==> ()
		testRemoveCashier() ==
		(
		dcl c: StoreCashier := cashier;
		assertTrue(c in set kid2kid.getCashiers());
		kid2kid.removeCashier(c);
		assertTrue(c not in set kid2kid.getCashiers());
		store.addCashier(c);
		assertTrue(c in set kid2kid.getCashiers());
		);
		
	-- Remove a client and re-add him
	private testRemoveClient: () ==> ()
		testRemoveClient() ==
		(
		dcl c: Client := client;
		assertTrue(c in set kid2kid.getClients());
		kid2kid.removeClient(c);
		assertTrue(c not in set kid2kid.getClients());
		kid2kid.addClient(c);
		assertTrue(c in set kid2kid.getClients());
		);
		
	-- Number of transactions is as expected
	private testGetTransactions: nat ==> ()
		testGetTransactions(expectedNumber) ==
		(
		assertTrue(card kid2kid.getTransactions() = expectedNumber);
		);
		
	-- Number of products in the store is as expected
	private testGetProductsAtStore: (nat) ==> ()
		testGetProductsAtStore(expectedNum) ==
		(
			assertTrue(card kid2kid.getProductsAtStore(store) = expectedNum);
		);
		
	-- GiftCards work as expected
	private testStoreGiftCards: (bool) ==> ()
		testStoreGiftCards(isAdmin) ==
		(
		dcl gcValue:nat := 40;
		dcl gc: GiftCard := kid2kid.sellGiftCard(client, cashier, today, gcValue);
		dcl saleProducts: Sale, saleGC: Sale;
		assertTrue(card kid2kid.getActiveGiftCards() = 1); -- GiftCards are activated when sold. 
		assertTrue(gc in set client.getGiftCardsBought()); -- Client saves GiftCards bought.
		kid2kid.sellProductInGiftCards(products(1), client, cashier, {gc}, today); -- A client buys a product with a giftcard
		assertTrue(card kid2kid.getActiveGiftCards() = 0); -- GiftCards gets deactivated.
		assertTrue(products(1) in set client.getProductsBought());
		if isAdmin then (
			-- Test sale transactions with GiftCards
			saleProducts := iota x in set kid2kid.getTransactions() & isofclass(Sale, x) and x.getValue() = gcValue;
			assertTrue(card saleProducts.getGiftCardsUsed() = 0);
			assertTrue(card saleProducts.getGiftCardsSold() = 1); 
			saleGC := iota x in set kid2kid.getTransactions() & isofclass(Sale, x) and x.getValue() = products(1).getSellPrice();
			assertTrue(card saleGC.getGiftCardsUsed() = 1);
			assertTrue(card saleGC.getGiftCardsSold() = 0);
			)
		);
		
	-- Check store products available and client products bought.
	private testStoreSellProductInCash: () ==> ()
		testStoreSellProductInCash() ==
		(
		assertTrue(products(2) in set store.getProductsAvailable());
		kid2kid.sellProductInCash(products(2), client, cashier, today);
		assertTrue(products(2) not in set store.getProductsAvailable());
		assertTrue(products(2) in set client.getProductsBought());
		);
		
	-- Check that credit notes of client decrease when store sells a product and client pays with credit notes
	private testStoreSellProductInCreditNotes: () ==> ()
		testStoreSellProductInCreditNotes() ==
		(
		dcl clientPrevCredit: real := store.getCreditNotesOfClient(client.getId());
		assertTrue(clientPrevCredit > 0);
		assertTrue(products(3) in set store.getProductsAvailable());
		kid2kid.sellProductInCreditNotes(products(3), client, cashier, today);
		assertTrue(products(3) not in set store.getProductsAvailable());
		assertTrue(products(3) in set client.getProductsBought());
		assertTrue(store.getCreditNotesOfClient(client.getId()) = clientPrevCredit - products(3).getSellPrice()); -- credit notes decreased
		);
	
	-- Edit client name
	private testEditClient: () ==> ()
		testEditClient() ==
		(
		assertTrue(client in set kid2kid.getClients());
		client.setName("123");
		assertTrue("123" = client.getName());
		client.setName("abc");
		assertTrue("abc" = client.getName());
		);
	
	-- Get static value of giftcards possible values
	private testGiftCardPossibleValues: () ==> ()
		testGiftCardPossibleValues() ==
		(
		assertTrue(GiftCard`getPossibleValues() = {10, 20, 40});
		);
		
	-- Test set description of product
	private testProductEdit: () ==> ()
		testProductEdit() ==
		(
		dcl p: Clothing := new Clothing(<New>, "J", 10, 12, <Jeans>);
		assertTrue(p.getDescription() = "J");
		p.setDescription("abc");
		assertTrue(p.getDescription() = "abc");
		);
		
	-- Test udpate sell price of product
	private testProductPricing: () ==> ()
		testProductPricing() ==
		(
		dcl p: Clothing := new Clothing(<New>, "J", 10, 12, <Jeans>);
		assertTrue(p.getBuyPrice() = 10);
		assertTrue(p.getSellPrice() = 13);
		p.setSellPrice(20);
		assertTrue(p.getSellPrice() = 20);
		);

	-- Test all admin operations
	public testAdminOperations: () ==> ()
		testAdminOperations() == 
			(
			testAddClient();
			testAddStore();
			testAddCashierToStore("Joao");
			testAddCashierToStore("Renato");
			testGetCashiers(2);
			testGetCashierNames({"Joao", "Renato"});
			testGetTransactions(0);
			testRemoveCashier();
			testRemoveClient();
			testStoreBuyProductsInCashAsAdmin();
			testCashierOperations(true);
			);
			
	-- Test all cashier operations
	public testCashierOperations: (bool) ==> ()
		testCashierOperations(isAdmin) ==
			(
			dcl numProducts: nat := card kid2kid.getProductsAtStore(store);
			numProducts := numProducts + testStoreBuyProductsInCash();
			numProducts := numProducts + testStoreBuyProductsInCreditNotes();
			testGetProductsAtStore(numProducts);
			testStoreGiftCards(isAdmin);
			testStoreSellProductInCash();
			testStoreSellProductInCreditNotes();
			testEditClient();
			);
			
	-- Test other miscelanious operations
	public testMiscOperations: () ==> ()
		testMiscOperations() ==
		(
		testGiftCardPossibleValues();
		testProductEdit();
		testProductPricing();
		);
	
	public static main: () ==> ()
		main() ==
		(
			dcl kid2KidTest: Kid2KidTest := new Kid2KidTest();
			kid2KidTest.loginAdmin();
			kid2KidTest.testAdminOperations();
			kid2KidTest.loginCashier("Porto", "Joao");
			kid2KidTest.testCashierOperations(false);
			kid2KidTest.testStoreBuyProductsInCashAsCashier();
			kid2KidTest.testMiscOperations();
		);
end Kid2KidTest