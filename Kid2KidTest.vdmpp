class Kid2KidTest
types
	public NotEmptyString = seq1 of char;
instance variables
	kid2kid : Kid2Kid := new Kid2Kid();
	client: Client := new Client("abc");
	store: Store := new Store("Porto");
	cashier: StoreCashier;
	today: Date := new Date(4,1,2019);
	products: seq of Product := [];
operations
	
	private assertTrue: bool ==> ()
	 assertTrue(cond) == return
	 pre cond;
	 
	private loginAdmin: () ==> ()
	loginAdmin() ==
	(
		assertTrue(kid2kid.login("Admin") = <Admin>)
	);
	
	private loginCashier: NotEmptyString * NotEmptyString ==> ()
	loginCashier(storeName, cashierName) ==
	(
		assertTrue(kid2kid.login(storeName, cashierName) = <Cashier>)
	);
	 
	private testAddClient: () ==> ()
		testAddClient() ==
		(
			assertTrue(card kid2kid.getClients() = 0);
			kid2kid.addClient(client);
			assertTrue(card kid2kid.getClients() = 1);
		);
			
	private testAddStore: () ==> ()
		testAddStore() ==
		(
			assertTrue(card kid2kid.getStores() = 0);
			kid2kid.addStore(store);
			assertTrue(card kid2kid.getStores() = 1);
		);
		
	private testAddCashierToStore: (NotEmptyString) ==> ()
		testAddCashierToStore(name) ==
		(
			dcl prevNumCashiers: nat := card store.getCashiers();
			cashier := new StoreCashier(name, store);
			store.addCashier(cashier);
			assertTrue(card store.getCashiers() = prevNumCashiers + 1);
		);
		
	private testStoreBuyProductsInCash : () ==> (nat)
		testStoreBuyProductsInCash() ==
		(
			dcl toy: Product := new Toy(<New>, nil, 5, nil, <Cars>);
			dcl gear: Product := new Gear(<High_Use>, nil, 1, 20, <Bathtubs>);
			dcl furniture: Product := new Furniture(<New>, nil, <Beds>);
			products := [toy, gear, furniture];
			assertTrue(elems products inter store.getProductsAvailable() = {});
			assertTrue(elems products  inter client.getProductsSold() = {});
			kid2kid.buyProductInCash(toy,client,cashier,today);
			kid2kid.buyProductInCash(gear,client,cashier,today);
			kid2kid.buyProductInCash(furniture,client,cashier,today);
			assertTrue(elems products subset store.getProductsAvailable());
			assertTrue(elems products subset client.getProductsSold());
			return len products;
		);
		
	private testStoreBuyProductsInCreditNotes: () ==> (nat)
		testStoreBuyProductsInCreditNotes() ==
		(
			dcl boots: Product := new Footwear(<Low_Use>, "Boots", 20, <Boots>);
			dcl jeans: Product := new Clothing(<Low_Use>, "Blue Jeans", 1, 2, <Jeans>);
			dcl productsSet: set of Product := {boots, jeans};
			dcl clientPrevCredit: real := store.getCreditNotesOfClient(client.getId());
			assertTrue(productsSet inter store.getProductsAvailable() = {});
			assertTrue(productsSet inter client.getProductsSold() = {});
			kid2kid.buyProductInCreditNotes(boots, client, cashier, today);
			kid2kid.buyProductInCreditNotes(jeans, client, cashier, today);
			assertTrue(productsSet subset store.getProductsAvailable());
			assertTrue(productsSet subset client.getProductsSold());
			assertTrue(store.getCreditNotesOfClient(client.getId()) = clientPrevCredit + boots.getCreditNotesValue() + jeans.getCreditNotesValue());
			return card productsSet;
		);

	private testGetCashiers: nat ==> ()
		testGetCashiers(expectedNumber) ==
		(
			assertTrue(card kid2kid.getCashiers() = expectedNumber);
		);
	private testGetCashierNames: set of NotEmptyString ==> ()
		testGetCashierNames(namesSet) ==
		(
			assertTrue( (namesSet \ kid2kid.getCashierNames()) = {});
		);
	public testGetProductsAtStore: (nat) ==> ()
		testGetProductsAtStore(expectedNum) ==
		(
			assertTrue(card kid2kid.getProductsAtStore(store) = expectedNum);
		);
		
	public testStoreGiftCards: () ==> ()
		testStoreGiftCards() ==
		(
		dcl gc: GiftCard := kid2kid.sellGiftCard(client, cashier, today, 40);
		assertTrue(card kid2kid.getActiveGiftCards() = 1);
		assertTrue(gc in set client.getGiftCardsBought());
		kid2kid.sellProductInGiftCards(products(1), client, cashier, {gc}, today);
		assertTrue(card kid2kid.getActiveGiftCards() = 0);
		assertTrue(products(1) in set client.getProductsBought());
		);
		
	public testStoreSellProductInCash: () ==> ()
		testStoreSellProductInCash() ==
		(
		assertTrue(products(2) in set store.getProductsAvailable());
		kid2kid.sellProductInCash(products(2), client, cashier, today);
		assertTrue(products(2) not in set store.getProductsAvailable());
		assertTrue(products(2) in set client.getProductsBought());
		);
		
		public testStoreSellProductInCreditNotes: () ==> ()
			testStoreSellProductInCreditNotes() ==
			(
			dcl clientPrevCredit: real := store.getCreditNotesOfClient(client.getId());
			assertTrue(clientPrevCredit > 0);
			assertTrue(products(3) in set store.getProductsAvailable());
			kid2kid.sellProductInCreditNotes(products(3), client, cashier, today);
			assertTrue(products(3) not in set store.getProductsAvailable());
			assertTrue(products(3) in set client.getProductsBought());
			assertTrue(store.getCreditNotesOfClient(client.getId()) = clientPrevCredit - products(3).getSellPrice());
			);

	public testEditClient: () ==> ()
		testEditClient() ==
		(
		assertTrue(client in set kid2kid.getClients());
		client.setName("123");
		assertTrue("123" = client.getName());
		client.setName("abc");
		assertTrue("abc" = client.getName());
		);

	public testAdminOperations: () ==> ()
		testAdminOperations() == 
			(
			testAddClient();
			testAddStore();
			testAddCashierToStore("Joao");
			testAddCashierToStore("Renato");
			testGetCashiers(2);
			testGetCashierNames({"Joao", "Renato"});
			testCashierOperations();
			);
			

	public testCashierOperations: () ==> ()
		testCashierOperations() ==
			(
			dcl numProducts: nat := card kid2kid.getProductsAtStore(store);
			numProducts := numProducts + testStoreBuyProductsInCash();
			numProducts := numProducts + testStoreBuyProductsInCreditNotes();
			testGetProductsAtStore(numProducts);
			testStoreGiftCards();
			testStoreSellProductInCash();
			testStoreSellProductInCreditNotes();
			testEditClient();
			);
	
	public static main: () ==> ()
		main() ==
		(
			dcl kid2KidTest: Kid2KidTest := new Kid2KidTest();
			kid2KidTest.loginAdmin();
			kid2KidTest.testAdminOperations();
			kid2KidTest.loginCashier("Porto", "Joao");
			kid2KidTest.testCashierOperations();
		);

traces
-- TODO Define Combinatorial Test Traces here
end Kid2KidTest