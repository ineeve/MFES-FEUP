/* Main class where all interactions will pass through.
*/
class Kid2Kid
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	clients: set of Client := {};
	stores: set of Store := {};
	activeGiftCards: set of GiftCard := {};
operations

	public Kid2Kid() k:Kid2Kid ==
		return self
		pre true
		post true;

	/*
	Post:
	- New client is added to the system
	*/
	public addClient(c: Client) ==
		clients := clients union {c}
		pre true
		post c in set clients;
		
	/*
	Post:
	- New store is added to the system
	*/
	public addStore(s: Store) ==
		stores := stores union {s}
		pre true
		post s in set stores;
		
	public getClients() c: set of Client ==
		return clients
		pre true
		post c = clients;
		
	public getStores() s: set of Store ==
		return stores
		pre true
		post s = stores;
	
	/* Buy product of a client at a store with a specific cashier.
	*/
	public buyProductInCash(product: Product, client: Client, cashier: StoreCashier) ==
		cashier.buyProductInCash(product, client)
		pre true
		post true;
		
	/* Buy product of a client at a store with a specific cashier.
	*/
	public buyProductInCreditNotes(product: Product, client: Client, cashier: StoreCashier) ==
		cashier.buyProductInCreditNotes(product, client)
		pre true
		post true;
		
	/* Sell product to a client at a store with a specific cashier.
	*/
	public sellProduct(client: Client, cashier: StoreCashier) ==
		is not yet specified
		pre true
		post true;
		
	public activateGiftCard(giftCard: GiftCard) ==
		activeGiftCards := activeGiftCards union {giftCard}
		pre true
		post activeGiftCards = activeGiftCards union {giftCard};
		
	public useGiftCard(giftCard: GiftCard) ==
		activeGiftCards := activeGiftCards \ {giftCard}
		pre giftCard in set activeGiftCards
		post activeGiftCards = activeGiftCards~ \ {giftCard}
		
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Kid2Kid