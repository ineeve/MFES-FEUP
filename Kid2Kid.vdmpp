/* Main class where all interactions will pass through.
*/
class Kid2Kid
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	clients: set of Client := {};
	stores: set of Store := {};
	activeGiftCards: set of GiftCard := {};
	transactions: set of Transaction := {}
operations

	public Kid2Kid: () ==> Kid2Kid 
	Kid2Kid() ==
		return self
		pre true
		post clients = {} and stores = {} and activeGiftCards = {} and transactions = {} and RESULT = self;

	/*
	Post:
	- New client is added to the system
	*/
	public addClient: Client ==> ()
	addClient(c) ==
		clients := clients union {c}
		pre true
		post c in set clients;
		
	/*
	Post:
	- New store is added to the system
	*/
	public addStore: Store ==> ()
	addStore(s) ==
		stores := stores union {s}
		pre true
		post s in set stores;
		
	public getClients: () ==> set of Client 
	getClients() ==
		return clients
		pre true
		post RESULT = clients;
		
	public getStores: () ==> set of Store 
	getStores() ==
		return stores
		pre true
		post RESULT = stores;
	
	/* Buy product of a client at a store with a specific cashier.
	*/
	public buyProductInCash: Product* Client * StoreCashier * Date ==> ()
	buyProductInCash(product, client, cashier, date) ==
		(
		cashier.buyProductInCash(product);
		client.sellProduct(product);
		addPurchaseTransaction(date, client, {product}, cashier);
		)
		pre true
		post true;
		
	/* Buy product of a client at a store with a specific cashier.
	*/
	public buyProductInCreditNotes: Product * Client * StoreCashier * Date ==> ()
	buyProductInCreditNotes(product, client, cashier, date) ==
		(
		cashier.buyProductInCreditNotes(product, client);
		client.sellProduct(product);
		addPurchaseTransaction(date, client, {product}, cashier);
		)
		pre true
		post true;
		
	/* Sell product to a client at a store with a specific cashier.
	*/
	public sellProductInCash: Product * Client * StoreCashier * Date ==> ()
	sellProductInCash(p,c,sc,d) ==
		(
		sc.sellProduct(p);
		c.buyProduct(p);
		addSaleProductTransaction(d, c, {p}, {}, sc);
		)
		pre true
		post true;
		
	public sellProductInCreditNotes: Product * Client * StoreCashier * Date ==> ()
	sellProductInCreditNotes(p, c, sc, d) ==
		(
		sc.sellProductInCreditNotes(p, c);
		c.buyProduct(p);
		addSaleProductTransaction(d, c, {p}, {}, sc);
		)
		pre true
		post card transactions = card transactions~ + 1;
		
	public sellProductInGiftCards: Product * Client * StoreCashier * set of GiftCard * Date ==> ()
	sellProductInGiftCards(p, c, sc, gc, d) ==
		(
		sc.sellProduct(p);
		c.buyProduct(p);
		addSaleProductTransaction(d, c, {p}, gc, sc);
		for all giftCard in set gc do useGiftCard(giftCard);
		)
		pre gc subset activeGiftCards
		post card transactions = card transactions~ + 1 and
		gc inter activeGiftCards = {};
		
	sellGiftCard: Client * StoreCashier * Date * nat1 ==> ()
	sellGiftCard(c, sc, d, value) == 
		(
		dcl gc: GiftCard := sc.sellGiftCard(value);
		c.buyGiftCard(gc);
		addSaleGCTransaction(d, c, {gc}, sc);
		)
		pre true
		post true;
		
	public activateGiftCard: GiftCard ==> ()
	activateGiftCard(giftCard) ==
		activeGiftCards := activeGiftCards union {giftCard}
		pre true
		post activeGiftCards = activeGiftCards union {giftCard};
		
	public useGiftCard: GiftCard ==> ()
	useGiftCard(giftCard) ==
		activeGiftCards := activeGiftCards \ {giftCard}
		pre giftCard in set activeGiftCards
		post activeGiftCards = activeGiftCards~ \ {giftCard};
		
	private addSaleProductTransaction: Date * Client * set of Product * set of GiftCard * StoreCashier ==> ()
	addSaleProductTransaction(d,c,sp,gcs,sc) ==
		(
		dcl transaction: Transaction := new Sale(d,c,sp,gcs,sc);
		transactions := transactions union {transaction};
		)
		pre card sp >= 1
		post card transactions = card transactions~ + 1;
		
	private addSaleGCTransaction: Date * Client * set of GiftCard * StoreCashier ==> ()
	addSaleGCTransaction(d,c,gcs,sc) ==	
	(
		dcl transaction: Transaction := new Sale(d,c,gcs,sc);
		transactions := transactions union {transaction};
		)
		pre card gcs >= 1
		post card transactions = card transactions~ + 1;
	
	private addPurchaseTransaction: Date * Client * set of Product * StoreCashier ==> () 
	addPurchaseTransaction(d,c,sp,sc) ==	
	(
		dcl transaction: Transaction := new Purchase(d,c,sp,sc);
		transactions := transactions union {transaction};
		)
		pre card sp >= 1
		post card transactions = card transactions~ + 1;
		
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Kid2Kid