/* Main class where all interactions will pass through.
*/
class Kid2Kid
types
	public NotEmptyString = seq1 of char;
	public UserType = <Cashier> | <Admin> | <LoggedOut>;
	
values

instance variables
	clients: set of Client := {};
	stores: set of Store := {};
	activeGiftCards: set of GiftCard := {};
	transactions: set of Transaction := {};
	
	loggedInType: UserType := <LoggedOut>;
	loggedInUsername: NotEmptyString;
	
operations

	public Kid2Kid: () ==> Kid2Kid 
	Kid2Kid() ==
		return self
		pre true
		post clients = {} and stores = {} and activeGiftCards = {} and transactions = {} and 
		loggedInType = <LoggedOut> and RESULT = self;

	/* Login admin */
	public login: NotEmptyString ==> UserType
	login(name) ==
	(
		if (name = "Admin")
		then (loggedInType := <Admin>; loggedInUsername := "Admin")
		else (loggedInType := <LoggedOut>; loggedInUsername := " ");
		
		return loggedInType
	)
		pre true
		post RESULT = loggedInType;
		
	public login: NotEmptyString * NotEmptyString ==> UserType
	login(storeName, cashierName) ==
		(
		if (storeName in set getStoreNamesInternal() and cashierName in set getStore(storeName).getCashierNames())
		then (loggedInType := <Cashier>; loggedInUsername := cashierName)
		else (loggedInType := <LoggedOut>; loggedInUsername := " ");
		
		return loggedInType
		)
		pre true
		post RESULT = loggedInType;
			
	private pure getStore: NotEmptyString ==> Store
	getStore(name) ==
		(
		dcl store: Store;
		for all s in set stores do
			if (name = s.getLocation()) then store := s;
		return store
		)
		pre true
		post RESULT in set stores and RESULT.getLocation() = name;
			
	public pure getLoggedInCashier: () ==> StoreCashier
	getLoggedInCashier() ==
		(
		dcl cashier: StoreCashier;
		for all c in set getCashiersInternal() do
			if (loggedInUsername = c.getName())
			then cashier := c;
		return cashier
		)
		pre loggedInType = <Cashier>
		post RESULT in set getCashiersInternal() and RESULT.getName() = loggedInUsername;
		
	public removeCashier: StoreCashier ==> ()
	removeCashier(c) ==
		c.getStore().removeCashier(c)
		pre hasAdminPerms() and c in set c.getStore().getCashiers()
		post c not in set c.getStore().getCashiers();
	
	public pure getTransactions: () ==> set of Transaction
	getTransactions() ==
		return transactions
		pre hasAdminPerms()
		post RESULT = transactions;
		
	public pure getTransactionsOfLoggedInCashier: () ==> set of Transaction
	getTransactionsOfLoggedInCashier() ==
		return getTransactionsOfCashier(getLoggedInCashier())
		pre loggedInType = <Cashier>
		post RESULT = getTransactionsOfCashier(getLoggedInCashier());
	
	private pure getTransactionsOfCashier: StoreCashier ==> set of Transaction
	getTransactionsOfCashier(cashier) ==
		return {x | x in set transactions & x.getCashier() = cashier}
		pre true
		post true;
		
	
	/** Bypasses login permissions.
	*/
	private pure getCashierNamesInternal: () ==> set of NotEmptyString
	getCashierNamesInternal() ==
		(
		dcl names: set of NotEmptyString := {};
		for all cashier in set getCashiersInternal() do names := names union {cashier.getName()};
		return names;
		)
		pre true
		post true;
		
	/** Bypasses login permissions.
	*/
	private pure getStoreNamesInternal: () ==> set of NotEmptyString
	getStoreNamesInternal() ==
		(
		dcl names: set of NotEmptyString := {};
		for all store in set stores do names := names union {store.getLocation()};
		return names;
		)
		pre true
		post true;

	/** Bypasses login permissions.
	*/
	private pure getCashiersInternal: () ==> set of StoreCashier
	getCashiersInternal() ==
		(
		dcl cashiers: set of StoreCashier := {};
		for all store in set stores do cashiers := cashiers union store.getCashiers();
		return cashiers;
		)
		pre true
		post true;
		
	public pure getCashiers: () ==> set of StoreCashier
	getCashiers() ==
		return getCashiersInternal()
		pre hasAdminPerms()
		post true;
		
	public pure getCashierNames: () ==> set of NotEmptyString
	getCashierNames() ==
		return getCashierNamesInternal()
		pre hasAdminPerms()
		post true;

	/*
	Post:
	- New client is added to the system
	*/
	public addClient: Client ==> ()
	addClient(c) ==
		clients := clients union {c}
		pre hasAdminPerms()
		post c in set clients;
	
	/* Remove client from system.
	Pre:
	- Client is part of the system
	Post:
	- Client isn't part of the system
	*/
	public removeClient: Client ==> ()
	removeClient(c) ==
		clients := clients \ {c}
		pre c in set clients
		post c not in set clients;
		
	/*
	Post:
	- New store is added to the system
	*/
	public addStore: Store ==> ()
	addStore(s) ==
		stores := stores union {s}
		pre hasAdminPerms()
		post s in set stores;
		
	public pure getClients: () ==> set of Client 
	getClients() ==
		return clients
		pre hasCashierPerms()
		post RESULT = clients;
		
	public pure getStores: () ==> set of Store 
	getStores() ==
		return stores
		pre hasAdminPerms()
		post RESULT = stores;
		
	public pure getProductsAtStore: Store ==> set of Product
	getProductsAtStore(store) ==
		return store.getProductsAvailable()
		pre store in set stores
		post RESULT = store.getProductsAvailable();
	
	/* Buy product of a client at a store with a specific cashier.
	*/
	public buyProductInCash: Product* Client * StoreCashier * Date ==> ()
	buyProductInCash(product, client, cashier, date) ==
		(
		cashier.buyProductInCash(product);
		client.sellProduct(product);
		addPurchaseTransaction(date, client, {product}, cashier);
		)
		pre hasCashierPerms()
		post true;
		
	/* Buy product of a client at a store with a specific cashier.
	*/
	public buyProductInCreditNotes: Product * Client * StoreCashier * Date ==> ()
	buyProductInCreditNotes(product, client, cashier, date) ==
		(
		cashier.buyProductInCreditNotes(product, client);
		client.sellProduct(product);
		addPurchaseTransaction(date, client, {product}, cashier);
		)
		pre hasCashierPerms()
		post true;
		
	/* Sell product to a client at a store with a specific cashier.
	*/
	public sellProductInCash: Product * Client * StoreCashier * Date ==> ()
	sellProductInCash(p,c,sc,d) ==
		(
		sc.sellProduct(p);
		c.buyProduct(p);
		addSaleProductTransaction(d, c, {p}, {}, sc);
		)
		pre hasCashierPerms()
		post true;
		
	public sellProductInCreditNotes: Product * Client * StoreCashier * Date ==> ()
	sellProductInCreditNotes(p, c, sc, d) ==
		(
		sc.sellProductInCreditNotes(p, c);
		c.buyProduct(p);
		addSaleProductTransaction(d, c, {p}, {}, sc);
		)
		pre hasCashierPerms()
		post card transactions = card transactions~ + 1;
		
	public sellProductInGiftCards: Product * Client * StoreCashier * set of GiftCard * Date ==> ()
	sellProductInGiftCards(p, c, sc, gc, d) ==
		(
		sc.sellProduct(p);
		c.buyProduct(p);
		addSaleProductTransaction(d, c, {p}, gc, sc);
		for all giftCard in set gc do useGiftCard(giftCard);
		)
		pre hasCashierPerms() and gc subset activeGiftCards
		post card transactions = card transactions~ + 1 and
		gc inter activeGiftCards = {};
		
	public sellGiftCard: Client * StoreCashier * Date * nat1 ==> ()
	sellGiftCard(c, sc, d, value) == 
		(
		dcl gc: GiftCard := sc.sellGiftCard(value);
		c.buyGiftCard(gc);
		addSaleGCTransaction(d, c, {gc}, sc);
		)
		pre hasCashierPerms()
		post true;
		
	public activateGiftCard: GiftCard ==> ()
	activateGiftCard(giftCard) ==
		activeGiftCards := activeGiftCards union {giftCard}
		pre hasCashierPerms()
		post activeGiftCards = activeGiftCards union {giftCard};
		
	public useGiftCard: GiftCard ==> ()
	useGiftCard(giftCard) ==
		activeGiftCards := activeGiftCards \ {giftCard}
		pre hasCashierPerms() and giftCard in set activeGiftCards
		post activeGiftCards = activeGiftCards~ \ {giftCard};
		
	private addSaleProductTransaction: Date * Client * set of Product * set of GiftCard * StoreCashier ==> ()
	addSaleProductTransaction(d,c,sp,gcs,sc) ==
		(
		dcl transaction: Transaction := new Sale(d,c,sp,gcs,sc);
		transactions := transactions union {transaction};
		)
		pre hasCashierPerms() and card sp >= 1
		post card transactions = card transactions~ + 1;
		
	private addSaleGCTransaction: Date * Client * set of GiftCard * StoreCashier ==> ()
	addSaleGCTransaction(d,c,gcs,sc) ==	
	(
		dcl transaction: Transaction := new Sale(d,c,gcs,sc);
		transactions := transactions union {transaction};
		)
		pre hasCashierPerms() and card gcs >= 1
		post card transactions = card transactions~ + 1;
	
	private addPurchaseTransaction: Date * Client * set of Product * StoreCashier ==> () 
	addPurchaseTransaction(d,c,sp,sc) ==	
	(
		dcl transaction: Transaction := new Purchase(d,c,sp,sc);
		transactions := transactions union {transaction};
		)
		pre hasCashierPerms() and card sp >= 1
		post card transactions = card transactions~ + 1;
		
	private pure hasCashierPerms: () ==> bool
	hasCashierPerms() ==
		return loggedInType in set {<Admin>, <Cashier>}
		pre true
		post RESULT = loggedInType in set {<Admin>, <Cashier>};
		
	private pure hasAdminPerms: () ==> bool
	hasAdminPerms() ==
		return loggedInType = <Admin>
		pre true
		post RESULT = (loggedInType = <Admin>);
		
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Kid2Kid